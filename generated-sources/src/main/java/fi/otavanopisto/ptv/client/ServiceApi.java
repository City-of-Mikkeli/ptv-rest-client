/**
 * PTV Open Api
 * Here you can see listed all the PTV Open Api methods.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fi.otavanopisto.ptv.client;

import fi.otavanopisto.ptv.client.model.*;

import fi.otavanopisto.ptv.client.model.IVmError;
import fi.otavanopisto.ptv.client.model.VmOpenApiServiceAndChannel;
import fi.otavanopisto.ptv.client.model.IVmOpenApiService;
import fi.otavanopisto.ptv.client.model.VmOpenApiServiceInBase;
import fi.otavanopisto.ptv.client.model.VmOpenApiGuidPage;
import java.time.OffsetDateTime;
import fi.otavanopisto.ptv.client.model.VmOpenApiService;
import fi.otavanopisto.ptv.client.model.VmOpenApiServiceIn;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-09-30T08:33:13.270+03:00")
public class ServiceApi {

  public ServiceApi(ApiClient client) {
    this.client = client;
  }
  
  /**
   * Creates a relationships between services and service channels.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;Service with id &#39;00000000-0000-0000-0000-00000000&#39; not found!\&quot;              }              &lt;/code&gt;
   * @param request A list of services and service channels. (optional)
   */
  public ApiResponse<List<String>> apiServiceAndChannelPost(VmOpenApiServiceAndChannel request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/ServiceAndChannel";
      
    ResultType<List<String>> resultType = new ResultType<List<String>>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Fetches all the information related to a single service.
   * 
   * @param id  (required)
   */
  public ApiResponse<IVmOpenApiService> apiServiceByIdGet(String id) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/Service/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<IVmOpenApiService> resultType = new ResultType<IVmOpenApiService>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates the defined service with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceNames[0].Type\&quot;: [                      \&quot;The Type field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param id Service identifier (required)
   * @param request The service data (optional)
   */
  public ApiResponse<IVmOpenApiService> apiServiceByIdPut(String id, VmOpenApiServiceInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/Service/{id}"
      .replaceAll("\\{" + "id" + "\\}", id);
      
    ResultType<IVmOpenApiService> resultType = new ResultType<IVmOpenApiService>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets all the published services within PTV as a list of service ids.              Services created after certain date can be fetched by adding date as query string parameter.
   * 
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   * @param page The page number to be fetched. (optional)
   */
  public ApiResponse<VmOpenApiGuidPage> apiServiceGet(OffsetDateTime date, Integer page) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
if (page != null)
    queryParams.put("page", page);
    
        
    String path = "/api/Service";
      
    ResultType<VmOpenApiGuidPage> resultType = new ResultType<VmOpenApiGuidPage>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Creates a new service with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceNames\&quot;: [                      \&quot;Type - Required value &#39;Name&#39; was not found!\&quot;                  ]              }              &lt;/code&gt;
   * @param request The service data. (optional)
   */
  public ApiResponse<VmOpenApiService> apiServicePost(VmOpenApiServiceIn request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/Service";
      
    ResultType<VmOpenApiService> resultType = new ResultType<VmOpenApiService>() {};
    return client.doPOSTRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Gets a list of published services for defined service channel.              Services joined to service channel after certain date can be fetched by adding date as query string parameter.
   * 
   * @param serviceChannelId Guid (required)
   * @param date Supports only format \&quot;yyyy-MM-ddTHH:mm:ss\&quot; (optional)
   */
  public ApiResponse<List<IVmOpenApiService>> apiServiceServiceChannelByServiceChannelIdGet(String serviceChannelId, OffsetDateTime date) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
    if (date != null)
    queryParams.put("date", date);
    
        
    String path = "/api/Service/serviceChannel/{serviceChannelId}"
      .replaceAll("\\{" + "serviceChannelId" + "\\}", serviceChannelId);
      
    ResultType<List<IVmOpenApiService>> resultType = new ResultType<List<IVmOpenApiService>>() {};
    return client.doGETRequest(path, resultType, queryParams, formParams);
  }
  /**
   * Updates the defined service with the data provided as input.
   * &lt;para&gt;HTTP status code 400 response model is a dictionary where key is property name and value is a list of error messages.&lt;/para&gt;  &lt;code&gt;              {                  \&quot;ServiceNames[0].Type\&quot;: [                      \&quot;The Type field is required.\&quot;                  ]              }              &lt;/code&gt;
   * @param sourceId External source identifier (required)
   * @param request The service data (optional)
   */
  public ApiResponse<IVmOpenApiService> apiServiceSourceIdBySourceIdPut(String sourceId, VmOpenApiServiceInBase request) {
    Map<String, Object> queryParams = new HashMap<>();
    Map<String, Object> formParams = new HashMap<>();
        
        
    String path = "/api/Service/sourceId/{sourceId}"
      .replaceAll("\\{" + "sourceId" + "\\}", sourceId);
      
    ResultType<IVmOpenApiService> resultType = new ResultType<IVmOpenApiService>() {};
    return client.doPUTRequest(path, resultType, queryParams, formParams);
  }
  
  private ApiClient client;
}
